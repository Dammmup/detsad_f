import React, { useEffect, useState } from 'react';
import { useGroups } from '../components/context/GroupsContext';
import {
  Table, TableHead, TableRow, TableCell, TableBody, Paper, CircularProgress, Alert, Button, Dialog, DialogTitle, DialogContent, DialogActions, TextField, IconButton, MenuItem, Select, FormControl, InputLabel, FormHelperText, SelectChangeEvent
} from '@mui/material';
import { Edit, Delete, Add, Group, Check, CheckBox } from '@mui/icons-material';

import { Group as GroupData } from '../components/services/api/groups';
import { getUsers, User } from '../components/services/api/users';

interface TeacherOption {
  id: string;
  fullName: string;
}
const options=['1','2','3','4','5','6']
interface GroupFormData {
  id?: string;
  name: string;
  description: string;
  maxCapacity: number;
  ageGroup: string[];
  teacher?: string;
}

const defaultForm: GroupFormData = { 
  name: '', 
  description: '', 
  maxCapacity: 20, 
  ageGroup: [], // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
  teacher: '' // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è backend
};

const Groups = () => {
  const groupsContext = useGroups();
  const [groups, setGroups] = useState<any[]>([]);
  const [teacherList, setTeacherList] = useState<TeacherOption[]>([]); // [{id, fullName}]
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [modalOpen, setModalOpen] = useState(false);
  const [form, setForm] = useState<GroupFormData>(defaultForm);
  const [editId, setEditId] = useState<string | null>(null);
  const [saving, setSaving] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    fetchGroups();
    fetchTeachers();
  }, []);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª–µ–π
  const fetchTeachers = async () => {
    try {
      const users: User[] = await getUsers();
      const filtered = users.filter((u) => ['teacher', 'assistant'].includes(u.role));
      setTeacherList(filtered.map((u) => ({ id: u.id || (u as any)._id, fullName: u.fullName })));
    } catch (e) {
      setTeacherList([]);
    }
  };
  const teachers = teacherList.map((t) => t.fullName);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø
  const fetchGroups = async () => {
    setLoading(true);
    setError(null);
    try {
      console.log('–ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø...');
      const data = await groupsContext.fetchGroups(true);
      console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø:', data);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Ç–∏–ø—É Group
      const formattedData: GroupData[] = Array.isArray(data)
        ? data.map(group => ({
            id: group.id || group._id,
            name: group.name,
            description: group.description || '',
            ageGroup: Object(group.ageGroup || ''),
            maxCapacity: group.maxCapacity || group.maxStudents || 0,
            isActive: group.isActive ?? true,
            teacher: typeof group.teacher === 'object' ? (group.teacher.id as any || group.teacher._id as any) : String(group.teacher || ''),
            // isActive: group.isActive, // —É–±—Ä–∞–Ω–æ, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ UI
            // createdBy: group.createdBy, // —É–±—Ä–∞–Ω–æ, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ UI
            createdAt: group.createdAt,
            updatedAt: group.updatedAt,
            maxStudents: group.maxStudents
          }))
        : [];
      
      console.log('–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', formattedData);
      setGroups(formattedData);
    } catch (err: any) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥—Ä—É–ø–ø:', err);
      setError(err?.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø');
    } finally {
      setLoading(false);
    }
  };

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleOpenModal = (group?: any) => {
    if (group) {
      setForm({
        id: group.id,
        name: group.name,
        description: group.description || '',
        maxCapacity: group.maxCapacity || 20,
        ageGroup: Array.isArray(group.ageGroup) ? group.ageGroup : typeof group.ageGroup === 'string' ? [group.ageGroup] : [],
        teacher: group.teacher
      });
      setEditId(group.id);
    } else {
      setForm(defaultForm);
      setEditId(null);
    }
    setModalOpen(true);
  };

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const handleCloseModal = () => {
    setModalOpen(false);
    setForm(defaultForm);
    setEditId(null);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–µ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    if (name) {
      setForm({ ...form, [name]: value });
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–µ –¥–ª—è Select
  const handleSelectChange = (e: SelectChangeEvent<string[]>) => {
    const { name, value } = e.target;
    if (name) {
      setForm({ ...form, [name]: typeof value === 'string' ? value.split(',') : value });
    }
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã (—Å–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
  const handleSave = async () => {
    setSaving(true);
    try {
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è backend
      const groupData = {
        name: form.name,
        description: form.description,
        maxStudents: form.maxCapacity, // backend –æ–∂–∏–¥–∞–µ—Ç maxStudents, –∞ –Ω–µ maxCapacity
        ageGroup: form.ageGroup, // —Ç–µ–ø–µ—Ä—å –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
        teacher: form.teacher, // —Ç–µ–ø–µ—Ä—å —ç—Ç–æ id –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—è
        isActive: true
      };
      
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –Ω–∞ backend:', groupData);
      
      if (editId) {
        await groupsContext.updateGroup(editId, groupData);
      } else {
        await groupsContext.createGroup(groupData);
      }
      handleCloseModal();
      fetchGroups();
    } catch (e: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã:', e);
      alert(e?.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
    } finally {
      setSaving(false);
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
  const handleDelete = async (id: string) => {
    if (!id) return;
    if (!window.confirm('–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É?')) return;
    setSaving(true);
    try {
      await groupsContext.deleteGroup(id);
      fetchGroups();
    } catch (e: any) {
      alert(e?.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
    } finally {
      setSaving(false);
    }
  };

  return (
    <Paper style={{ margin: 24, padding: 24 }}>
      <h1 style={{ color: '#1890ff', marginBottom: '16px' }}>
        <Group style={{ marginRight: 8, verticalAlign: 'middle' }} />
        –ì—Ä—É–ø–ø—ã
      </h1>
      <Button 
        variant="contained" 
        color="primary" 
        startIcon={<Add />} 
        style={{ marginBottom: 16 }} 
        onClick={() => handleOpenModal()}
      >
        –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É
      </Button>
      
      {loading && <CircularProgress />}
      {error && <Alert severity="error">{error}</Alert>}
      
      {!loading && !error && (
        <>
          {groups.length === 0 ? (
            <Alert severity="info" style={{ marginTop: 16 }}>–ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –≥—Ä—É–ø–ø—É!</Alert>
          ) : (
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell>–ù–∞–∑–≤–∞–Ω–∏–µ</TableCell>
                  <TableCell>–û–ø–∏—Å–∞–Ω–∏–µ</TableCell>
                  <TableCell>–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞</TableCell>
                  <TableCell>–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å</TableCell>
                  <TableCell>–í–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—å</TableCell>
                  <TableCell align="right">–î–µ–π—Å—Ç–≤–∏—è</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {groups.map((group) => (
                  <TableRow key={group.id}>
                    <TableCell>{group.name}</TableCell>
                    <TableCell>{group.description}</TableCell>
                    <TableCell>{group.ageGroup.join(', ')}</TableCell>
                    <TableCell>{group.maxCapacity}</TableCell>
                    <TableCell>{teacherList.find(t => t.id === group.teacher)?.fullName || '‚Äî'}</TableCell>
                    <TableCell align="right">
                      <IconButton onClick={() => handleOpenModal(group)}>
                        <Edit />
                      </IconButton>
                      <IconButton onClick={() => handleDelete(group.id)}>
                        <Delete color="error" />
                      </IconButton>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          )}
        </>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã */}
      <Dialog open={modalOpen} onClose={handleCloseModal} maxWidth="sm" fullWidth>
        <DialogTitle>
          {editId ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' : '–î–æ–±–∞–≤–∏—Ç—å'} –≥—Ä—É–ø–ø—É
        </DialogTitle>
        <DialogContent>
          <TextField
            autoFocus
            margin="dense"
            label="–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã"
            type="text"
            name="name"
            fullWidth
            value={form.name}
            onChange={handleChange}
          />
          <TextField
            margin="dense"
            label="–û–ø–∏—Å–∞–Ω–∏–µ"
            type="text"
            name="description"
            fullWidth
            value={form.description}
            onChange={handleChange}
          />
          <FormControl fullWidth margin="dense">
            <InputLabel>–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞</InputLabel>
            <Select
              value={form.ageGroup}
              label="–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞"
              name="ageGroup"
              onChange={handleSelectChange}
              multiple
            >
              {options.map((option) => (
                <MenuItem key={option} value={option}>
                  {option}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
          <TextField
            margin="normal"
            label="–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å"
            type="number"
            name="maxCapacity"
            fullWidth
            value={form.maxCapacity}
            onChange={handleChange}
          />
          {teachers.length > 0 && (
          <FormControl fullWidth margin="dense">
            <InputLabel>–í–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—å</InputLabel>
            <Select
              value={form.teacher || ''}
              label="–í–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—å"
              name="teacher"
              onChange={handleSelectChange as any}
            >
              {teacherList.map((t) => (
                <MenuItem key={t.id} value={t.id}>{t.fullName}</MenuItem>
              ))}
            </Select>
          </FormControl>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseModal}>–û—Ç–º–µ–Ω–∞</Button>
          <Button 
            onClick={handleSave} 
            variant="contained" 
            color="primary" 
            disabled={saving || !form.name}
          >
            {editId ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–î–æ–±–∞–≤–∏—Ç—å'}
          </Button>
        </DialogActions>
      </Dialog>
    </Paper>
  );
};

export default Groups;

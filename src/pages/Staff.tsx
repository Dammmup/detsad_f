import React, { useEffect, useState } from 'react';
import { getUsers, createUser, updateUser, deleteUser, User as StaffMember,  } from '../components/services/api/users';
import {
  Table, TableHead, TableRow, TableCell, TableBody, Paper, CircularProgress, Alert, Button, Dialog, 
  DialogTitle, DialogContent, DialogActions, TextField, IconButton, InputAdornment, FormControl,
  InputLabel, Select, MenuItem, FormHelperText, Grid, Tooltip, Chip, Divider, Box, Typography,
  OutlinedInput, SelectChangeEvent, Checkbox, ListItemText, 
} from '@mui/material';
import { 
  Edit, Delete, Add, Search, Email, Phone, Badge, 
 Person
} from '@mui/icons-material';

import { getGroups } from '../components/services/api/groups';
import { useAuth } from '../components/context/AuthContext';
import ExportMenuButton from '../components/ExportMenuButton';
import { exportStaffList } from '../components/services/api/excelExport';
import axios from 'axios';

// üá∑üá∫ –ü–µ—Ä–µ–≤–æ–¥—ã —Ä–æ–ª–µ–π —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
const roleTranslations: Record<string, string> = {
  // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ä–æ–ª–∏
  'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
  'manager': '–ú–µ–Ω–µ–¥–∂–µ—Ä',
  'director': '–î–∏—Ä–µ–∫—Ç–æ—Ä',
  
  // –ü–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–æ–ª–∏
  'teacher': '–í–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—å',
  'assistant': '–ü–æ–º–æ—â–Ω–∏–∫ –≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—è',
  'psychologist': '–ü—Å–∏—Ö–æ–ª–æ–≥',
  'speech_therapist': '–õ–æ–≥–æ–ø–µ–¥',
  'music_teacher': '–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å',
  'physical_education': '–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ —Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä–µ',
  
  // –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ä–æ–ª–∏
  'nurse': '–ú–µ–¥—Å–µ—Å—Ç—Ä–∞',
  'doctor': '–í—Ä–∞—á',
  
  // –û–±—Å–ª—É–∂–∏–≤–∞—é—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª
  'cook': '–ü–æ–≤–∞—Ä',
  'cleaner': '–£–±–æ—Ä—â–∏—Ü–∞',
  'security': '–û—Ö—Ä–∞–Ω–Ω–∏–∫',
  'maintenance': '–ó–∞–≤—Ö–æ–∑',
  'laundry': '–ü—Ä–∞—á–∫–∞',
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–æ–ª–∏
  'staff': '–°–æ—Ç—Ä—É–¥–Ω–∏–∫',
  'substitute': '–ü–æ–¥–º–µ–Ω–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫',
  'intern': '–°—Ç–∞–∂–µ—Ä'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ä–æ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
const translateRole = (role: string): string => {
  return roleTranslations[role] || role; // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–π —Ä–æ–ª–∏ –ø–æ —Ä—É—Å—Å–∫–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
const getRoleByTranslation = (translation: string): string => {
  const entry = Object.entries(roleTranslations).find(([_, value]) => value === translation);
  return entry ? entry[0] : translation;
};

const defaultForm: StaffMember = { 
  fullName: '',
  role: '',
  phone: '',
  email: '',
  active: true,
  type: 'adult'
};

const Staff = () => {
  const [staff, setStaff] = useState<StaffMember[]>([]);
  const [filteredStaff, setFilteredStaff] = useState<StaffMember[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [modalOpen, setModalOpen] = useState(false);
  const [form, setForm] = useState<StaffMember>(defaultForm);
  const [editId, setEditId] = useState<string | null>(null);
  const [saving, setSaving] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterRole, setFilterRole] = useState<string[]>([]);
  const [formErrors, setFormErrors] = useState<{[key: string]: string}>({});
  const [newPersonalCode, setNewPersonalCode] = useState<string | null>(null);
  const [showCodeDialog, setShowCodeDialog] = useState(false);
  const { user: currentUser } = useAuth();
  // üá∑üá∫ –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ –ø–µ—Ä–µ–≤–æ–¥–æ–≤)
  const availableRoles = Object.values(roleTranslations).sort();
  
  const fetchStaff = () => {
    setLoading(true);
    setError(null);
    const includePasswords = currentUser?.role === 'admin';
    getUsers(includePasswords)
      .then(data => {
        setStaff(data.filter(u => u.type === 'adult'));
        setFilteredStaff(data);
      })
      .catch(err => setError(err?.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏'))
      .finally(() => setLoading(false));
  };
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø
  const fetchGroups = async () => {
    try {
      await getGroups()
      
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥—Ä—É–ø–ø:', err);
    }
  };

  useEffect(() => {
    
    fetchStaff();
    fetchGroups();
  }, []);
  
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞ —Ä–æ–ª–µ–π
  useEffect(() => {
    if (!staff.length) return;
    
    let filtered = [...staff];
  console.log(currentUser?.role)
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    if (searchTerm) {
      const search = searchTerm.toLowerCase();
      filtered = filtered.filter(member => 
        member.fullName?.toLowerCase().includes(search) ||
        member.email?.toLowerCase().includes(search) ||
        member.phone?.toLowerCase().includes(search) ||
        translateRole(member.role || '').toLowerCase().includes(search)
      );
    }
    
    // üá∑üá∫ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–æ–ª–∏ (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã)
    if (filterRole.length > 0) {
      filtered = filtered.filter(member => {
        const russianRole = translateRole(member.role || '');
        return filterRole.includes(russianRole);
      });
    }
    
    setFilteredStaff(filtered);
  }, [staff, searchTerm, filterRole]);

  const handleOpenModal = (member?: StaffMember) => {
    setForm(member ? { ...member } : defaultForm);
    setEditId(member?.id || null);
    setModalOpen(true);
  };

  const handleCloseModal = () => {
    setModalOpen(false);
    setForm(defaultForm);
    setEditId(null);
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setForm({ ...form, [name]: value });
    
    // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
    if (formErrors[name]) {
      setFormErrors(prev => ({ ...prev, [name]: '' }));
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Select
  const handleSelectChange = (e: SelectChangeEvent<string>) => {
    const { name, value } = e.target;
    setForm({ ...form, [name]: value });
    
    // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
    if (formErrors[name]) {
      setFormErrors(prev => ({ ...prev, [name]: '' }));
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
  const handleCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, checked } = e.target;
    setForm({ ...form, [name]: checked });
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ —Ä–æ–ª–µ–π
  const handleFilterRoleChange = (event: SelectChangeEvent<string[]>) => {
    const { value } = event.target;
    setFilterRole(typeof value === 'string' ? value.split(',') : value);
  };
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
  const validateForm = () => {
    const errors: {[key: string]: string} = {};
    
    if (!form.fullName) errors.fullName = '–§–ò–û –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    if (!form.role) errors.role = '–î–æ–ª–∂–Ω–æ—Å—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞';
    if (form.email && !/^\S+@\S+\.\S+$/.test(form.email)) {
      errors.email = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email';
    }
    
    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleSave = async () => {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    if (!validateForm()) {
      return;
    }
    
    setSaving(true);
    try {
      if (editId) {
        await updateUser(editId, form);
        handleCloseModal();
      } else {
        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        const newUser = await createUser(form);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        if (newUser.personalCode) {
          setNewPersonalCode(newUser.personalCode);
          setShowCodeDialog(true);
        }
        
        handleCloseModal();
      }
      fetchStaff();
    } catch (e: any) {
      alert(e?.response?.data?.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
    } finally {
      setSaving(false);
    }
  };

  const handleDelete = async (id: string | undefined) => {
    if (!id) return;
    if (!window.confirm('–£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞?')) return;
    setSaving(true);
    try {
      await deleteUser(id);
      fetchStaff();
    } catch (e: any) {
      alert(e?.response?.data?.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
    } finally {
      setSaving(false);
    }
  };

  const handleExportDownload = () => {
    exportStaffList(staff);
  };

  const handleExportEmail = async () => {
    try {
      await axios.post('/exports/staff', { action: 'email' });
      alert('–î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ—á—Ç—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    } catch (e) {
      alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –ø–æ—á—Ç—É');
    }
  };

  return (
    <Paper style={{ margin: 24, padding: 24 }}>
      <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
        <Typography variant="h5" style={{ color: '#1890ff', display: 'flex', alignItems: 'center' }}>
          <Person style={{ marginRight: 8 }} /> –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
        </Typography>
        <Box mb={2}>
          <ExportMenuButton
            onDownload={handleExportDownload}
            onSendEmail={handleExportEmail}
            label="–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å"
          />
        </Box>
        <Button 
          variant="contained" 
          color="primary" 
          startIcon={<Add />} 
          onClick={() => handleOpenModal()}
        >
          –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        </Button>
      </Box>
      
      {/* –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã */}
      <Box mb={3} display="flex" flexWrap="wrap" gap={2}>
        <TextField
          placeholder="–ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤..."
          variant="outlined"
          size="small"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          sx={{ flexGrow: 1, minWidth: '200px' }}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <Search />
              </InputAdornment>
            ),
          }}
        />
        
        <FormControl size="small" sx={{ minWidth: '200px' }}>
          <InputLabel id="role-filter-label">–§–∏–ª—å—Ç—Ä –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏</InputLabel>
          <Select
            labelId="role-filter-label"
            multiple
            value={filterRole}
            onChange={handleFilterRoleChange}
            input={<OutlinedInput label="–§–∏–ª—å—Ç—Ä –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏" />}
            renderValue={(selected) => (
              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
                {selected.map((value) => (
                  <Chip key={value} label={value} size="small" />
                ))}
              </Box>
            )}
          >
            {availableRoles.map((role) => (
              <MenuItem key={role} value={role}>
                <Checkbox checked={filterRole.indexOf(role) > -1} />
                <ListItemText primary={role} />
              </MenuItem>
            ))}
          </Select>
        </FormControl>
      </Box>
      
      {loading && <CircularProgress />}
      {error && <Alert severity="error">{error}</Alert>}
      
      {!loading && !error && (
        <>
          {filteredStaff.length === 0  ? (
            <Alert severity="info" style={{ marginTop: 16 }}>
              {staff.length === 0 ? '–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞!' : '–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–∏—Å–∫–∞.'}
            </Alert>
          ) : (
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell>–§–ò–û</TableCell>
                  <TableCell>–î–æ–ª–∂–Ω–æ—Å—Ç—å</TableCell>
                  <TableCell>–ö–æ–Ω—Ç–∞–∫—Ç—ã</TableCell>
                  <TableCell>–ü–∞—Ä–æ–ª—å</TableCell>
                  <TableCell>–°—Ç–∞—Ç—É—Å</TableCell>
                  <TableCell align="right">–î–µ–π—Å—Ç–≤–∏—è</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {filteredStaff.map((member) => (
                  <TableRow key={member.id}>
                    <TableCell>{member.fullName}</TableCell>
                    <TableCell>{translateRole(member.role || '')}</TableCell>
                    <TableCell>
                      <Box display="flex" flexDirection="column">
                        {member.phone && (
                          <Box display="flex" alignItems="center">
                            <Phone fontSize="small" style={{ marginRight: 4, opacity: 0.6 }} />
                            {member.phone}
                          </Box>
                        )}
                        {member.email && (
                          <Box display="flex" alignItems="center">
                            <Email fontSize="small" style={{ marginRight: 4, opacity: 0.6 }} />
                            {member.email}
                          </Box>
                        )}
                      </Box>
                    </TableCell>{currentUser?.role === 'admin' ? (
                    <TableCell>{member.initialPassword || '‚Äî'}</TableCell>
  ) : (
    <TableCell>‚Äî</TableCell>
  )}
                    <TableCell>
                       <Chip 
                        label={member.active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'} 
                        color={member.active ? 'success' : 'default'}
                        size="small"
                      />
                    </TableCell>
                    <TableCell align="right">
                      <Tooltip title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                        <IconButton onClick={() => handleOpenModal(member)}>
                          <Edit />
                        </IconButton>
                      </Tooltip>
                      <Tooltip title="–£–¥–∞–ª–∏—Ç—å">
                        <IconButton onClick={() => handleDelete(member.id)}>
                          <Delete color="error" />
                        </IconButton>
                      </Tooltip>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          )}
        </>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
      <Dialog open={modalOpen} onClose={handleCloseModal} maxWidth="md" fullWidth>
        <DialogTitle>
          <Box display="flex" alignItems="center">
            {editId ? (
              <>
                <Edit style={{ marginRight: 8 }} /> –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
              </>
            ) : (
              <>
                <Add style={{ marginRight: 8 }} /> –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
              </>
            )}
          </Box>
        </DialogTitle>
        <DialogContent>
          <Grid container spacing={2} sx={{ mt: 1 }}>
            {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <Grid item xs={12}>
              <Typography variant="subtitle1" gutterBottom>
                <Badge style={{ marginRight: 8 }} /> –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
              </Typography>
              <Divider sx={{ mb: 2 }} />
            </Grid>
            
            <Grid item xs={12} md={6}>
              <TextField
                label="–§–ò–û"
                name="fullName"
                value={form.fullName}
                onChange={handleChange}
                fullWidth
                required
                error={!!formErrors.fullName}
                helperText={formErrors.fullName}
              />
            </Grid>
            
            <Grid item xs={12} md={6}>
              <FormControl fullWidth required error={!!formErrors.role}>
                <InputLabel>–î–æ–ª–∂–Ω–æ—Å—Ç—å</InputLabel>
                <Select
                  name="role"
                  value={translateRole(form.role || '')}
                  onChange={(e) => {
                    const russianRole = e.target.value as string;
                    const englishRole = getRoleByTranslation(russianRole);
                    setForm({ ...form, role: englishRole });
                  }}
                  label="–î–æ–ª–∂–Ω–æ—Å—Ç—å"
                >
                  {availableRoles.map(russianRole => (
                    <MenuItem key={russianRole} value={russianRole}>{russianRole}</MenuItem>
                  ))}
                </Select>
                {formErrors.role && <FormHelperText>{formErrors.role}</FormHelperText>}
              </FormControl>
            </Grid>
            
            <Grid item xs={12} md={6}>
              <TextField
                label="Email"
                name="email"
                type="email"
                value={form.email || ''}
                onChange={handleChange}
                fullWidth
                error={!!formErrors.email}
                helperText={formErrors.email}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <Email />
                    </InputAdornment>
                  ),
                }}
              />
            </Grid>
            
            <Grid item xs={12} md={6}>
              <TextField
                label="–¢–µ–ª–µ—Ñ–æ–Ω"
                name="phone"
                value={form.phone || ''}
                onChange={handleChange}
                fullWidth
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <Phone />
                    </InputAdornment>
                  ),
                }}
              />
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseModal} color="secondary">
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button onClick={handleSave} color="primary" variant="contained" disabled={saving}>
            {editId ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–î–æ–±–∞–≤–∏—Ç—å'}
          </Button>
        </DialogActions>
      </Dialog>

      {/* –î–∏–∞–ª–æ–≥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ */}
      <Dialog 
        open={showCodeDialog} 
        onClose={() => setShowCodeDialog(false)}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle sx={{ textAlign: 'center', bgcolor: 'primary.main', color: 'white' }}>
          üîë –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        </DialogTitle>
        <DialogContent sx={{ pt: 3 }}>
          <Box sx={{ textAlign: 'center', mb: 3 }}>
            <Typography variant="h6" gutterBottom>
              –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!
            </Typography>
            <Typography variant="body1" color="text.secondary" gutterBottom>
              –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É:
            </Typography>
            
            <Box 
              sx={{ 
                p: 3, 
                bgcolor: 'grey.100', 
                borderRadius: 2, 
                border: '2px dashed #1976d2',
                my: 2
              }}
            >
              <Typography 
                variant="h4" 
                sx={{ 
                  fontFamily: 'monospace',
                  fontWeight: 'bold',
                  letterSpacing: '0.5rem',
                  color: 'primary.main'
                }}
              >
                {newPersonalCode}
              </Typography>
            </Box>
            
            <Alert severity="info" sx={{ mt: 2, textAlign: 'left' }}>
              <Typography variant="body2">
                üìù <strong>–í–∞–∂–Ω–æ:</strong><br/>
                ‚Ä¢ –ü–µ—Ä–µ–¥–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É<br/>
                ‚Ä¢ –ö–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤–º–µ—Å—Ç–µ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞<br/>
                ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–æ–¥ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ
              </Typography>
            </Alert>
          </Box>
        </DialogContent>
        <DialogActions>
          <Button 
            onClick={() => {
              navigator.clipboard.writeText(newPersonalCode || '');
              alert('–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
            }}
            variant="outlined"
          >
            üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
          </Button>
          <Button 
            onClick={() => setShowCodeDialog(false)} 
            variant="contained" 
            color="primary"
          >
            –ü–æ–Ω—è—Ç–Ω–æ
          </Button>
        </DialogActions>
      </Dialog>
    </Paper>
  );
};

export default Staff;


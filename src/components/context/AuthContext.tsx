import React, {
  createContext,
  useContext,
  useState,
  useEffect,
  useCallback,
  ReactNode,
} from 'react';
import { getCurrentUser, isAuthenticated, logout } from '../../services/auth';
import { User } from '../../types/common';
import { useNavigate } from 'react-router-dom';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
interface AuthContextType {
  user: User | null;
  isLoggedIn: boolean;
  loading: boolean;
  login: (user: User, token: string) => void;
  logout: () => Promise<void>;
  checkAuth: () => Promise<boolean>;
}

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
const AuthContext = createContext<AuthContextType | undefined>(undefined);

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [loading, setLoading] = useState(true);
  const [logoutInProgress, setLogoutInProgress] = useState(false);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const checkAuthStatus = async () => {
    setLoading(true);

    try {
      const currentUser = getCurrentUser();
      const authenticated = await isAuthenticated();

      if (currentUser && authenticated) {
        setUser(currentUser);
        setIsLoggedIn(true);
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', currentUser.fullName);
      } else {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        setUser(null);
        setIsLoggedIn(false);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      setUser(null);
      setIsLoggedIn(false);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    checkAuthStatus();
  }, []);

  // –í—Ö–æ–¥
  const handleLogin = (userData: User, token: string) => {
    setUser(userData);
    setIsLoggedIn(true);

    localStorage.setItem('user', JSON.stringify(userData));
    if (token) {
      localStorage.setItem('auth_token', token);
    }

    console.log('üîê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É:', userData.fullName);
  };

  // –í—ã—Ö–æ–¥
  const handleLogout = async () => {
    // –ï—Å–ª–∏ —É–∂–µ –∏–¥—ë—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—ã—Ö–æ–¥–∞ ‚Äî –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
    if (logoutInProgress) {
      console.log('‚ö†Ô∏è –í—ã—Ö–æ–¥ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ –æ—Ç–∫–ª–æ–Ω—ë–Ω.');
      return;
    }

    setLogoutInProgress(true);

    try {
      await logout();
      console.log('üö™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã');

      setUser(null);
      setIsLoggedIn(false);

      // –ß–∏—Å—Ç–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      localStorage.removeItem('user');
      localStorage.removeItem('auth_token');

      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
      window.location.href = '/login';
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error);

      // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      setUser(null);
      setIsLoggedIn(false);
      localStorage.removeItem('user');
      localStorage.removeItem('auth_token');
    } finally {
      setLogoutInProgress(false);
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–Ω–∞—Ä—É–∂–∏
  const checkAuth = useCallback(async (): Promise<boolean> => {
    try {
      const currentUser = getCurrentUser();
      const authenticated = await isAuthenticated();

     if (currentUser && authenticated) {
  if (!user) {
    setUser(currentUser);
    setIsLoggedIn(true);
  }
  return true;
}

// ‚ùå –ù–µ –≤—ã–∑—ã–≤–∞–µ–º logout, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false
setUser(null);
setIsLoggedIn(false);
return false;

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      return false;
    }
  }, [user]);

  const value: AuthContextType = {
    user,
    isLoggedIn,
    loading,
    login: handleLogin,
    logout: handleLogout,
    checkAuth,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);

  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }

  return context;
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∑–∞—â–∏—â—ë–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
interface ProtectedRouteProps {
  children: ReactNode;
}


export const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children }) => {
  const { isLoggedIn, loading, checkAuth } = useAuth();
  const [checking, setChecking] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    const verifyAuth = async () => {
      if (loading) return;

      const authValid = await checkAuth();

      if (!authValid) {
        console.log('üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º');
        navigate('/login', { replace: true });
      } else {
        setChecking(false);
      }
    };

    verifyAuth();
  }, [loading, checkAuth, navigate]);

  if (loading || checking) {
    return <div>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...</div>;
  }

  if (!isLoggedIn) return null;

  return <>{children}</>;
};


import axios from 'axios';

const API_URL = `${process.env.REACT_APP_API_URL}/api` || 'http://localhost:8080/api';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
export interface LoginCredentials {
  email: string;
  password: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è WhatsApp –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
export interface WhatsAppLoginRequest {
  phoneNumber: string;
}

export interface WhatsAppVerifyRequest {
  phoneNumber: string;
  otpCode: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤
export interface PersonalCodeLoginRequest {
  phoneNumber: string;
  personalCode: string;
}

export interface GeneratePersonalCodeRequest {
  userId: string;
}

export interface PersonalCodeResponse {
  success: boolean;
  message: string;
  personalCode?: string;
  user?: {
    id: string;
    fullName: string;
    phone: string;
    personalCode?: string;
  };
}

export interface OTPResponse {
  success: boolean;
  message: string;
  expiresIn?: number; // –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–æ–¥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
}

export interface AuthResponse {
  token: string;
  user: {
    id: string;
    email: string;
    fullName: string;
    role: string;
  };
}

export interface User {
  id: string;
  email: string;
  fullName: string;
  role: string;
}

// Create axios instance for auth (–±–µ–∑ interceptors —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
const authApi = axios.create({
  baseURL: API_URL,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// ===== WHATSAPP –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø =====

/**
 * Send OTP code via WhatsApp
 * @param {WhatsAppLoginRequest} request - Phone number for OTP
 * @returns {Promise<OTPResponse>} OTP send result
 */
export const sendWhatsAppOTP = async (request: WhatsAppLoginRequest): Promise<OTPResponse> => {
  try {
    console.log('üì± –û—Ç–ø—Ä–∞–≤–∫–∞ OTP –Ω–∞ WhatsApp:', request.phoneNumber);
    
    const response = await authApi.post('/auth/whatsapp/send-otp', {
      phoneNumber: request.phoneNumber
    });
    
    return {
      success: true,
      message: '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ WhatsApp',
      expiresIn: response.data.expiresIn || 300 // 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    };
    
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ OTP:', error.response?.data || error.message);
    
    // –ï—Å–ª–∏ backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if (error.code === 'ECONNREFUSED' || error.response?.status === 404) {
      console.warn('üîß Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫ OTP –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
      return createMockOTP(request.phoneNumber);
    }
    
    throw new Error(error.response?.data?.message || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞');
  }
};

/**
 * Verify OTP code and login via WhatsApp
 * @param {WhatsAppVerifyRequest} request - Phone number and OTP code
 * @returns {Promise<AuthResponse>} Auth response with token and user data
 */
export const verifyWhatsAppOTP = async (request: WhatsAppVerifyRequest): Promise<AuthResponse> => {
  try {
    console.log('üîê –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è OTP –¥–ª—è:', request.phoneNumber);
    
    const response = await authApi.post('/auth/whatsapp/verify-otp', {
      phoneNumber: request.phoneNumber,
      otpCode: request.otpCode
    });
    
    const authData: AuthResponse = {
      token: response.data.token,
      user: {
        id: response.data.user.id || response.data.user._id,
        email: response.data.user.email || `${request.phoneNumber}@whatsapp.local`,
        fullName: response.data.user.fullName || response.data.user.name || 'WhatsApp User',
        role: response.data.user.role || 'staff'
      }
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    localStorage.setItem('token', authData.token);
    localStorage.setItem('user', JSON.stringify(authData.user));
    localStorage.setItem('phoneNumber', request.phoneNumber);
    
    console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ WhatsApp:', authData.user.fullName);
    return authData;
    
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ OTP:', error.response?.data || error.message);
    
    // –ï—Å–ª–∏ backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ–∑–¥–∞–µ–º –º–æ–∫-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if (error.code === 'ECONNREFUSED' || error.response?.status === 404) {
      console.warn('üîß Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
      return createMockWhatsAppAuth(request);
    }
    
    throw new Error(error.response?.data?.message || '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è');
  }
};

/**
 * Login user and get token (–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Å–ø–æ—Å–æ–±)
 * @param {LoginCredentials} credentials - User credentials
 * @returns {Promise<AuthResponse>} Auth response with token and user data
 */
export const login = async (credentials: LoginCredentials): Promise<AuthResponse> => {
  try {
    console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è:', credentials.email);
    
    const response = await authApi.post('/auth/login', credentials);
    
    const authData: AuthResponse = {
      token: response.data.token,
      user: {
        id: response.data.user.id || response.data.user._id,
        email: response.data.user.email,
        fullName: response.data.user.fullName || response.data.user.name,
        role: response.data.user.role || 'staff'
      }
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    localStorage.setItem('token', authData.token);
    localStorage.setItem('user', JSON.stringify(authData.user));
    
    console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥:', authData.user.fullName);
    return authData;
    
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error.response?.data || error.message);
    
    // –ï—Å–ª–∏ backend –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Å–æ–∑–¥–∞–µ–º –º–æ–∫-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if (error.code === 'ECONNREFUSED' || error.response?.status === 404) {
      console.warn('üîß Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
      return createMockAuth(credentials);
    }
    
    throw new Error(error.response?.data?.message || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
  }
};

/**
 * Logout user and clear token
 */
export const logout = async (): Promise<void> => {
  try {
    const token = localStorage.getItem('token');
    
    if (token) {
      // –£–≤–µ–¥–æ–º–ª—è–µ–º backend –æ –≤—ã—Ö–æ–¥–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      await authApi.post('/auth/logout', {}, {
        headers: { Authorization: `Bearer ${token}` }
      });
    }
  } catch (error) {
    console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –Ω–∞ backend:', error);
  } finally {
    // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    console.log('üö™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
  }
};

/**
 * Get current user from token
 * @returns {User | null} Current user or null if not authenticated
 */
export const getCurrentUser = (): User | null => {
  try {
    const userStr = localStorage.getItem('user');
    const token = localStorage.getItem('token');
    
    if (!userStr || !token) {
      return null;
    }
    
    return JSON.parse(userStr);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return null;
  }
};

/**
 * Check if user is authenticated
 * @returns {boolean} True if user has valid token
 */
export const isAuthenticated = (): boolean => {
  const token = localStorage.getItem('token');
  const user = getCurrentUser();
  
  return !!(token && user);
};

/**
 * Refresh token if needed
 * @returns {Promise<string | null>} New token or null if refresh failed
 */
export const refreshToken = async (): Promise<string | null> => {
  try {
    const currentToken = localStorage.getItem('token');
    
    if (!currentToken) {
      return null;
    }
    
    const response = await authApi.post('/auth/refresh', {}, {
      headers: { Authorization: `Bearer ${currentToken}` }
    });
    
    const newToken = response.data.token;
    localStorage.setItem('token', newToken);
    
    console.log('üîÑ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω');
    return newToken;
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
    
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω, –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    
    return null;
  }
};

/**
 * Create mock OTP for development
 * @param {string} phoneNumber - Phone number
 * @returns {OTPResponse} Mock OTP response
 */
const createMockOTP = (phoneNumber: string): OTPResponse => {
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–∫-–∫–æ–¥ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const mockCode = '1234';
  localStorage.setItem('mockOTP', JSON.stringify({
    phoneNumber,
    code: mockCode,
    expiresAt: Date.now() + 300000 // 5 –º–∏–Ω—É—Ç
  }));
  
  console.log(`üß™ –ú–æ–∫ OTP –∫–æ–¥ –¥–ª—è ${phoneNumber}: ${mockCode}`);
  
  return {
    success: true,
    message: `–ú–æ–∫-–∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${phoneNumber}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥: ${mockCode}`,
    expiresIn: 300
  };
};

/**
 * Create mock WhatsApp authentication for development
 * @param {WhatsAppVerifyRequest} request - Verify request
 * @returns {AuthResponse} Mock auth response
 */
const createMockWhatsAppAuth = (request: WhatsAppVerifyRequest): AuthResponse => {
  console.log('üîç –ù–∞—á–∞–ª–æ –º–æ–∫-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è:', request);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∫-–∫–æ–¥
  const mockOTPStr = localStorage.getItem('mockOTP');
  console.log('üíæ –ú–æ–∫ OTP –∏–∑ localStorage:', mockOTPStr);
  
  if (mockOTPStr) {
    const mockOTP = JSON.parse(mockOTPStr);
    console.log('üìä –ü–∞—Ä—Å–∏–Ω–≥ –º–æ–∫ OTP:', mockOTP);
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π:');
    console.log('  - –ù–æ–º–µ—Ä —Å–æ–≤–ø–∞–¥–∞–µ—Ç:', mockOTP.phoneNumber === request.phoneNumber, `(${mockOTP.phoneNumber} === ${request.phoneNumber})`);
    console.log('  - –ö–æ–¥ —Å–æ–≤–ø–∞–¥–∞–µ—Ç:', mockOTP.code === request.otpCode, `(${mockOTP.code} === ${request.otpCode})`);
    console.log('  - –ö–æ–¥ –Ω–µ –∏—Å—Ç–µ–∫:', Date.now() < mockOTP.expiresAt, `(${Date.now()} < ${mockOTP.expiresAt})`);
    
    if (mockOTP.phoneNumber === request.phoneNumber && 
        mockOTP.code === request.otpCode && 
        Date.now() < mockOTP.expiresAt) {
      
      console.log('‚úÖ –í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
      
      // –û—á–∏—â–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
      localStorage.removeItem('mockOTP');
      
      const mockToken = `whatsapp-token-${Date.now()}-${Math.random().toString(36).substring(2)}`;
      
      const mockUser: User = {
        id: `whatsapp-user-${request.phoneNumber.replace(/\D/g, '')}`,
        email: `${request.phoneNumber}@whatsapp.local`,
        fullName: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${request.phoneNumber}`,
        role: request.phoneNumber.includes('777') ? 'admin' : 'staff' // 777 –≤ –Ω–æ–º–µ—Ä–µ = –∞–¥–º–∏–Ω
      };
      
      const authData: AuthResponse = {
        token: mockToken,
        user: mockUser
      };
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
      localStorage.setItem('token', authData.token);
      localStorage.setItem('user', JSON.stringify(authData.user));
      localStorage.setItem('phoneNumber', request.phoneNumber);
      
      console.log('üß™ –°–æ–∑–¥–∞–Ω–∞ –º–æ–∫ WhatsApp –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:', mockUser);
      console.log('üîë –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', mockToken);
      
      return authData;
    } else {
      console.error('‚ùå –û–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å–ª–æ–≤–∏–π –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã');
    }
  } else {
    console.error('‚ùå –ú–æ–∫ OTP –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage');
  }
  
  throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è');
};

/**
 * Create mock authentication for development
 * @param {LoginCredentials} credentials - User credentials
 * @returns {AuthResponse} Mock auth response
 */
const createMockAuth = (credentials: LoginCredentials): AuthResponse => {
  const mockToken = `mock-token-${Date.now()}-${Math.random().toString(36).substring(2)}`;
  
  const mockUser: User = {
    id: 'mock-user-1',
    email: credentials.email,
    fullName: credentials.email.split('@')[0] || '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    role: credentials.email.includes('admin') ? 'admin' : 'staff'
  };
  
  const authData: AuthResponse = {
    token: mockToken,
    user: mockUser
  };
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
  localStorage.setItem('token', authData.token);
  localStorage.setItem('user', JSON.stringify(authData.user));
  
  console.log('üß™ –°–æ–∑–¥–∞–Ω–∞ –º–æ–∫-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:', mockUser);
  return authData;
};

/**
 * Validate token with backend
 * @returns {Promise<boolean>} True if token is valid
 */
export const validateToken = async (): Promise<boolean> => {
  try {
    const token = localStorage.getItem('token');
    
    if (!token) {
      return false;
    }
    
    await authApi.get('/auth/validate', {
      headers: { Authorization: `Bearer ${token}` }
    });
    
    return true;
    
  } catch (error) {
    console.warn('–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω:', error);
    return false;
  }
};

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É
export const loginWithPersonalCode = async (request: PersonalCodeLoginRequest): Promise<AuthResponse> => {
  try {
    console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É:', request.phoneNumber);
    
    const response = await authApi.post('/auth/personal-code', request);
    
    if (response.data.success && response.data.token) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
      localStorage.setItem('token', response.data.token);
      
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É');
      
      return {
        token: response.data.token,
        user: {
          id: response.data.user.id,
          email: response.data.user.phone,
          fullName: response.data.user.fullName,
          role: response.data.user.role
        }
      };
    } else {
      throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É:', error);
    throw new Error(error.response?.data?.error || error.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
export const generatePersonalCode = async (request: GeneratePersonalCodeRequest): Promise<PersonalCodeResponse> => {
  try {
    console.log('üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', request.userId);
    
    const response = await authApi.post('/auth/generate-personal-code', request, {
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('token')}`
      }
    });
    
    console.log('‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:', response.data.personalCode);
    
    return response.data;
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞:', error);
    throw new Error(error.response?.data?.error || error.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
};

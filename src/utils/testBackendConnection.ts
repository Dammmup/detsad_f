/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—ç–∫–µ–Ω–¥—É
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CORS
 */

const testBackendConnection = async () => {
  const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';
  
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—ç–∫–µ–Ω–¥—É...');
  console.log(`üîÑ URL API: ${API_URL}`);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
    console.log('\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞...');
    const response = await fetch(API_URL);
    
    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status} ${response.statusText}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS
    console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS...');
    const corsHeaders = {};
    response.headers.forEach((value, key) => {
      if (key.toLowerCase().includes('access-control')) {
        corsHeaders[key] = value;
      }
    });
    
    if (Object.keys(corsHeaders).length > 0) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏:', corsHeaders);
    } else {
      console.warn('‚ö†Ô∏è CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –≠—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∫—Ä–æ—Å—Å-–¥–æ–º–µ–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏.');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ API
    console.log('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ API...');
    
    const endpoints = [
      { name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', path: '/users' },
      { name: '–ö—É—Ä—Å—ã (–ì—Ä—É–ø–ø—ã)', path: '/groups' },
      { name: '–†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', path: '/users/roles' },
      { name: '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏', path: '/users/teachers' }
    ];
    
    for (const endpoint of endpoints) {
      try {
        const endpointResponse = await fetch(`${API_URL}${endpoint.path}`);
        console.log(`   ${endpoint.name} (${endpoint.path}): ${endpointResponse.status} ${endpointResponse.statusText}`);
      } catch (error) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ${endpoint.name}:`, error.message);
      }
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 300));
    }
    
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±—ç–∫–µ–Ω–¥—É:', error.message);
    console.log('\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.log('1. –ë—ç–∫–µ–Ω–¥ –Ω–µ –∑–∞–ø—É—â–µ–Ω');
    console.log('2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL API –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
    console.log('3. –ü—Ä–æ–±–ª–µ–º—ã —Å CORS –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞');
    console.log('4. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º');
    console.log('\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É');
    console.log(`2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CORS –Ω–∞ –±—ç–∫–µ–Ω–¥–µ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –∑–∞–ø—Ä–æ—Å—ã —Å ${window.location.origin})`);
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –≤ package.json –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞');
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
if (typeof window !== 'undefined') {
  window.testBackendConnection = testBackendConnection;
}

export default testBackendConnection;

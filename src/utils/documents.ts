// ===== –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–û–ö–£–ú–ï–ù–¢–ê–ú–ò =====

import { 
  Document, 
  DocumentTemplate, 
  DocumentType, 
  DocumentCategory, 
  DocumentStatus,
  TemplateType,
  TemplateCategory
} from '../types/documents';

// ===== –¢–ò–ü–´ –ò –ò–ù–¢–ï–†–§–ï–ô–°–´ =====

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
export interface DocumentFilters {
  type?: string;
  category?: string;
  status?: string;
  relatedId?: string;
  relatedType?: 'staff' | 'child' | 'group';
  search?: string;
  page?: number;
  limit?: number;
  sort?: string;
  order?: 'asc' | 'desc';
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —à–∞–±–ª–æ–Ω–æ–≤
export interface TemplateFilters {
  type?: string;
  category?: string;
  isActive?: boolean;
  search?: string;
  page?: number;
  limit?: number;
  sort?: string;
  order?: 'asc' | 'desc';
}

// ===== –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–û–ö–£–ú–ï–ù–¢–ê–ú–ò =====

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
export const formatFileSize = (bytes: number): string => {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
export const formatDate = (dateString: string): string => {
  const date = new Date(dateString);
  return date.toLocaleDateString('ru-RU', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit'
  });
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã —Å –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏
export const formatDateWithWeekday = (dateString: string): string => {
  const date = new Date(dateString);
  const weekdays = ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'];
  const weekday = weekdays[date.getDay()];
  const formattedDate = formatDate(dateString);
  return `${formattedDate} (${weekday})`;
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
export const getDocumentTypeIcon = (type: DocumentType): string => {
  switch (type) {
    case 'contract': return 'üìã';
    case 'certificate': return 'üìú';
    case 'report': return 'üìä';
    case 'policy': return 'üìñ';
    case 'other': return 'üìÑ';
    default: return 'üìÑ';
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
export const getDocumentTypeText = (type: DocumentType): string => {
  switch (type) {
    case 'contract': return '–î–æ–≥–æ–≤–æ—Ä';
    case 'certificate': return '–°–ø—Ä–∞–≤–∫–∞';
    case 'report': return '–û—Ç—á–µ—Ç';
    case 'policy': return '–ü–æ–ª–∏—Ç–∏–∫–∞';
    case 'other': return '–î—Ä—É–≥–æ–µ';
    default: return type;
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
export const getDocumentCategoryText = (category: DocumentCategory): string => {
  switch (category) {
    case 'staff': return '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏';
    case 'children': return '–î–µ—Ç–∏';
    case 'financial': return '–§–∏–Ω–∞–Ω—Å—ã';
    case 'administrative': return '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è';
    case 'other': return '–î—Ä—É–≥–æ–µ';
    default: return category;
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
export const getDocumentStatusText = (status: DocumentStatus): string => {
  switch (status) {
    case 'active': return '–ê–∫—Ç–∏–≤–µ–Ω';
    case 'archived': return '–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω';
    default: return status;
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
export const getDocumentStatusColor = (status: DocumentStatus): 'success' | 'warning' | 'default' | 'error' => {
  switch (status) {
    case 'active': return 'success';
    case 'archived': return 'default';
    default: return 'default';
  }
};

// ===== –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –®–ê–ë–õ–û–ù–ê–ú–ò =====

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–∏–ø–∞ —à–∞–±–ª–æ–Ω–∞
export const getTemplateTypeText = (type: TemplateType): string => {
  switch (type) {
    case 'contract': return '–î–æ–≥–æ–≤–æ—Ä';
    case 'certificate': return '–°–ø—Ä–∞–≤–∫–∞';
    case 'report': return '–û—Ç—á–µ—Ç';
    case 'policy': return '–ü–æ–ª–∏—Ç–∏–∫–∞';
    case 'other': return '–î—Ä—É–≥–æ–µ';
    default: return type;
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —à–∞–±–ª–æ–Ω–∞
export const getTemplateCategoryText = (category: TemplateCategory): string => {
  switch (category) {
    case 'staff': return '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏';
    case 'children': return '–î–µ—Ç–∏';
    case 'financial': return '–§–∏–Ω–∞–Ω—Å—ã';
    case 'administrative': return '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è';
    case 'other': return '–î—Ä—É–≥–æ–µ';
    default: return category;
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —à–∞–±–ª–æ–Ω–∞
export const getTemplateActiveColor = (isActive: boolean): 'success' | 'default' | 'error' => {
  return isActive ? 'success' : 'default';
};

// ===== –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ò –°–û–†–¢–ò–†–û–í–ö–ê =====

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
export const filterDocuments = (documents: Document[], filters: DocumentFilters): Document[] => {
  let filtered = [...documents];
  
  // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
  if (filters.type) {
    filtered = filtered.filter(doc => doc.type === filters.type);
  }
  
  // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  if (filters.category) {
    filtered = filtered.filter(doc => doc.category === filters.category);
  }
  
  // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
  if (filters.status) {
    filtered = filtered.filter(doc => doc.status === filters.status);
  }
  
  // –§–∏–ª—å—Ç—Ä –ø–æ —Å–≤—è–∑–∞–Ω–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É
  if (filters.relatedId && filters.relatedType) {
    filtered = filtered.filter(doc =>
      doc.relatedId === filters.relatedId && doc.relatedType === filters.relatedType
    );
  }
  
  // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
  if (filters.search) {
    const searchLower = filters.search.toLowerCase();
    filtered = filtered.filter(doc =>
      doc.title.toLowerCase().includes(searchLower) ||
      (doc.description && doc.description.toLowerCase().includes(searchLower)) ||
      doc.fileName.toLowerCase().includes(searchLower) ||
      doc.tags.some(tag => tag.toLowerCase().includes(searchLower))
    );
  }
  
  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
  if (filters.sort) {
    filtered.sort((a, b) => {
      let aValue: any = (a as any)[filters.sort as keyof Document];
      let bValue: any = (b as any)[filters.sort as keyof Document];
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç –≤ —á–∏—Å–ª–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      if (aValue instanceof Date) aValue = aValue.getTime();
      if (bValue instanceof Date) bValue = bValue.getTime();
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      if (typeof aValue === 'string') aValue = aValue.toLowerCase();
      if (typeof bValue === 'string') bValue = bValue.toLowerCase();
      
      if (filters.order === 'desc') {
        return bValue > aValue ? 1 : bValue < aValue ? -1 : 0;
      } else {
        return aValue > bValue ? 1 : aValue < bValue ? -1 : 0;
      }
    });
  }
  
  return filtered;
};

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤
export const filterTemplates = (templates: DocumentTemplate[], filters: TemplateFilters): DocumentTemplate[] => {
  let filtered = [...templates];
  
  // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
  if (filters.type) {
    filtered = filtered.filter(template => template.type === filters.type);
  }
  
  // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  if (filters.category) {
    filtered = filtered.filter(template => template.category === filters.category);
  }
  
  // –§–∏–ª—å—Ç—Ä –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  if (filters.isActive !== undefined) {
    filtered = filtered.filter(template => template.isActive === filters.isActive);
  }
  
  // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
  if (filters.search) {
    const searchLower = filters.search.toLowerCase();
    filtered = filtered.filter(template =>
      template.name.toLowerCase().includes(searchLower) ||
      (template.description && template.description.toLowerCase().includes(searchLower)) ||
      template.fileName.toLowerCase().includes(searchLower) ||
      template.tags.some(tag => tag.toLowerCase().includes(searchLower))
    );
  }
  
  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
  if (filters.sort) {
    filtered.sort((a, b) => {
      let aValue: any = (a as any)[filters.sort as keyof DocumentTemplate];
      let bValue: any = (b as any)[filters.sort as keyof DocumentTemplate];
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç –≤ —á–∏—Å–ª–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      if (aValue instanceof Date) aValue = aValue.getTime();
      if (bValue instanceof Date) bValue = bValue.getTime();
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      if (typeof aValue === 'string') aValue = aValue.toLowerCase();
      if (typeof bValue === 'string') bValue = bValue.toLowerCase();
      
      if (filters.order === 'desc') {
        return bValue > aValue ? 1 : bValue < aValue ? -1 : 0;
      } else {
        return aValue > bValue ? 1 : aValue < bValue ? -1 : 0;
      }
    });
  }
  
  return filtered;
};

// ===== –ü–ê–ì–ò–ù–ê–¶–ò–Ø =====

// –ü–∞–≥–∏–Ω–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞
export const paginateArray = <T>(array: T[], page: number, limit: number): T[] => {
  const startIndex = (page - 1) * limit;
  const endIndex = startIndex + limit;
  return array.slice(startIndex, endIndex);
};

// ===== –í–ê–õ–ò–î–ê–¶–ò–Ø =====

// –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞
export const validateDocument = (document: Partial<Document>): { isValid: boolean; errors: string[] } => {
  const errors: string[] = [];
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
  if (!document.title) {
    errors.push('–ü–æ–ª–µ "title" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
  }
  
  if (!document.type) {
    errors.push('–ü–æ–ª–µ "type" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
  } else if (!['contract', 'certificate', 'report', 'policy', 'other'].includes(document.type)) {
    errors.push('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞');
  }
  
  if (!document.category) {
    errors.push('–ü–æ–ª–µ "category" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
  } else if (!['staff', 'children', 'financial', 'administrative', 'other'].includes(document.category)) {
    errors.push('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞');
  }
  
  if (!document.fileName) {
    errors.push('–ü–æ–ª–µ "fileName" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
  }
  
  if (document.fileSize === undefined || document.fileSize === null) {
    errors.push('–ü–æ–ª–µ "fileSize" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
  } else if (document.fileSize < 0) {
    errors.push('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º');
  }
  
  if (!document.filePath) {
    errors.push('–ü–æ–ª–µ "filePath" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
  }
  
  if (!document.uploader) {
    errors.push('–ü–æ–ª–µ "uploader" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
  }
  
  if (!document.status) {
    errors.push('–ü–æ–ª–µ "status" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
  } else if (!['active', 'archived'].includes(document.status)) {
    errors.push('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞
  if (document.expiryDate) {
    const expiryDate = new Date(document.expiryDate);
    const uploadDate = document.uploadDate ? new Date(document.uploadDate) : new Date();
    
    if (expiryDate < uploadDate) {
      errors.push('–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏');
    }
  }
  
  return {
    isValid: errors.length === 0,
    errors
  };
};

// –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
export const validateDocumentTemplate = (template: Partial<DocumentTemplate>): { isValid: boolean; errors: string[] } => {
  const errors: string[] = [];
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
  if (!template.name) {
    errors.push('–ü–æ–ª–µ "name" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
  }
  
  if (!template.type) {
    errors.push('–ü–æ–ª–µ "type" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
  } else if (!['contract', 'certificate', 'report', 'policy', 'other'].includes(template.type)) {
    errors.push('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —à–∞–±–ª–æ–Ω–∞');
  }
  
  if (!template.category) {
    errors.push('–ü–æ–ª–µ "category" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
  } else if (!['staff', 'children', 'financial', 'administrative', 'other'].includes(template.category)) {
    errors.push('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —à–∞–±–ª–æ–Ω–∞');
  }
  
  if (!template.fileName) {
    errors.push('–ü–æ–ª–µ "fileName" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
  }
  
  if (template.fileSize === undefined || template.fileSize === null) {
    errors.push('–ü–æ–ª–µ "fileSize" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
  } else if (template.fileSize < 0) {
    errors.push('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º');
  }
  
  if (!template.filePath) {
    errors.push('–ü–æ–ª–µ "filePath" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
  }
  
  if (!template.version) {
    errors.push('–ü–æ–ª–µ "version" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
  }
  
  if (template.isActive === undefined || template.isActive === null) {
    errors.push('–ü–æ–ª–µ "isActive" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏
  if (template.version) {
    const versionRegex = /^\d+\.\d+$/;
    if (!versionRegex.test(template.version)) {
      errors.push('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ X.Y)');
    }
  }
  
  return {
    isValid: errors.length === 0,
    errors
  };
};

// ===== –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –§–ê–ô–õ–ê–ú–ò =====

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
export const getFileExtension = (fileName: string): string => {
  return fileName.split('.').pop()?.toLowerCase() || '';
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ MIME-—Ç–∏–ø–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
export const getMimeType = (extension: string): string => {
  const mimeTypes: Record<string, string> = {
    'pdf': 'application/pdf',
    'doc': 'application/msword',
    'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    'xls': 'application/vnd.ms-excel',
    'xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    'csv': 'text/csv',
    'txt': 'text/plain',
    'jpg': 'image/jpeg',
    'jpeg': 'image/jpeg',
    'png': 'image/png',
    'gif': 'image/gif'
  };
  
  return mimeTypes[extension] || 'application/octet-stream';
};

// ===== –≠–ö–°–ü–û–†–¢ =====


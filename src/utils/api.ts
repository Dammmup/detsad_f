import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';
import { ApiError, DelayFunction, ErrorHandler } from '../types/common';

// ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø API =====

export const API_BASE_URL = process.env.API_URL || 'https://detsad-b.onrender.com';
export const API_TIMEOUT = 10000; // 10 —Å–µ–∫—É–Ω–¥
export const RETRY_DELAY = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã
export const MAX_RETRIES = 3;

// ===== –£–¢–ò–õ–ò–¢–´ =====

/**
 * –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è rate limiting
 */
export const delay: DelayFunction = (ms = RETRY_DELAY) => 
  new Promise(resolve => setTimeout(resolve, ms));

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ API –æ—à–∏–±–æ–∫
 */
export const handleApiError: ErrorHandler = (error: any, context = '') => {
  const errorMessage = error.response?.data?.message || error.message;
  console.error(`Error ${context}:`, errorMessage);
  
  const apiError = new Error(`Error ${context}: ${errorMessage}`) as ApiError;
  apiError.status = error.response?.status;
  apiError.data = error.response?.data;
  
  throw apiError;
};

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ axios —Å –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
 */
export const createApiInstance = (baseURL: string = API_BASE_URL): AxiosInstance => {
  const api = axios.create({
    baseURL,
    timeout: API_TIMEOUT,
    headers: {
      'Content-Type': 'application/json',
    },
    withCredentials: true, // –í–∫–ª—é—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É credentials (–≤–∫–ª—é—á–∞—è cookies) —Å –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
  });

  // Request interceptor
  api.interceptors.request.use(
    (config) => {
      // –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ httpOnly cookie —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –∑–∞–ø—Ä–æ—Å–æ–º
      // –ù–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ localStorage –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization
      
      console.log('üì§ API –∑–∞–ø—Ä–æ—Å:', config.method?.toUpperCase(), config.url);
      return config;
    },
    (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
      return Promise.reject(error);
    }
  );

  // Response interceptor –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ retry –ª–æ–≥–∏–∫–∏
  api.interceptors.response.use(
    (response) => {
      console.log('‚úÖ API –æ—Ç–≤–µ—Ç:', response.status, response.config.url);
      return response;
    },
    async (error) => {
      const originalRequest = error.config;
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ 401 –æ—à–∏–±–∫–∏ (–Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
      if (error.response?.status === 401) {
        console.warn('üîí –û—à–∏–±–∫–∞ 401: –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
        
        if (typeof window !== 'undefined') {
          // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
          // –¢–æ–∫–µ–Ω –≤ httpOnly cookie —É–¥–∞–ª—è–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ logout
          localStorage.removeItem('user');
          window.location.href = '/login';
        }
        
        return Promise.reject(new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'));
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ 429 –æ—à–∏–±–∫–∏ (Too Many Requests) —Å retry
      if (error.response?.status === 429 && !originalRequest._retry) {
        originalRequest._retry = true;
        const retryAfter = error.response.headers['retry-after'] || 2;
        
        console.warn(`‚è≥ Rate limited. Retrying after ${retryAfter} seconds...`);
        
        await delay(retryAfter * 1000);
        return api(originalRequest);
      }
      
      console.error('‚ùå API –æ—à–∏–±–∫–∞:', error.response?.status, error.response?.data?.message || error.message);
      return Promise.reject(error);
    }
  );

  return api;
};

// ===== –ë–ê–ó–û–í–´–ô API –ö–õ–ò–ï–ù–¢ =====

export class BaseApiClient {
  protected api: AxiosInstance;

  constructor(baseURL?: string) {
    this.api = createApiInstance(baseURL);
  }

  /**
   * GET –∑–∞–ø—Ä–æ—Å
   */
  protected async get<T = any>(url: string, config?: AxiosRequestConfig): Promise<T> {
    try {
      const response: AxiosResponse<T> = await this.api.get(url, config);
      return response.data;
    } catch (error) {
      throw this.handleError(error, `GET ${url}`);
    }
  }

  /**
   * POST –∑–∞–ø—Ä–æ—Å
   */
  protected async post<T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> {
    try {
      const response: AxiosResponse<T> = await this.api.post(url, data, config);
      return response.data;
    } catch (error) {
      throw this.handleError(error, `POST ${url}`);
    }
  }

  /**
   * PUT –∑–∞–ø—Ä–æ—Å
   */
  protected async put<T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> {
    try {
      const response: AxiosResponse<T> = await this.api.put(url, data, config);
      return response.data;
    } catch (error) {
      throw this.handleError(error, `PUT ${url}`);
    }
  }

  /**
   * DELETE –∑–∞–ø—Ä–æ—Å
   */
  protected async delete<T = any>(url: string, config?: AxiosRequestConfig): Promise<T> {
    try {
      const response: AxiosResponse<T> = await this.api.delete(url, config);
      return response.data;
    } catch (error) {
      throw this.handleError(error, `DELETE ${url}`);
    }
  }

  /**
   * PATCH –∑–∞–ø—Ä–æ—Å
   */
  protected async patch<T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<T> {
    try {
      const response: AxiosResponse<T> = await this.api.patch(url, data, config);
      return response.data;
    } catch (error) {
      throw this.handleError(error, `PATCH ${url}`);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
   */
  private handleError(error: any, context: string): ApiError {
    return handleApiError(error, context);
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
   */
  protected async delayRequest(ms?: number): Promise<void> {
    await delay(ms);
  }
}

// ===== –ö–≠–®–ò–†–û–í–ê–ù–ò–ï =====

interface CacheItem<T> {
  data: T;
  timestamp: number;
  expiresIn: number;
}

export class ApiCache {
  private cache = new Map<string, CacheItem<any>>();

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞
   */
  get<T>(key: string): T | null {
    const item = this.cache.get(key);
    
    if (!item) {
      return null;
    }
    
    const now = Date.now();
    if (now - item.timestamp > item.expiresIn) {
      this.cache.delete(key);
      return null;
    }
    
    return item.data;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à
   */
  set<T>(key: string, data: T, expiresIn: number = 5 * 60 * 1000): void {
    this.cache.set(key, {
      data,
      timestamp: Date.now(),
      expiresIn
    });
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞
   */
  delete(key: string): void {
    this.cache.delete(key);
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫—ç—à–∞
   */
  clear(): void {
    this.cache.clear();
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞
   */
  size(): number {
    return this.cache.size;
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞
export const apiCache = new ApiCache();

// ===== –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò =====

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ MongoDB –æ–±—ä–µ–∫—Ç–∞ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
 */
export const normalizeMongoObject = <T extends Record<string, any>>(obj: T): T => {
  if (obj._id && !obj.id) {
    return { ...obj, id: obj._id };
  }
  return obj;
};

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ MongoDB –æ–±—ä–µ–∫—Ç–æ–≤
 */
export const normalizeMongoArray = <T extends Record<string, any>>(arr: T[]): T[] => {
  return arr.map(normalizeMongoObject);
};

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ –æ–±—ä–µ–∫—Ç–∞
 */
export const createQueryParams = (params: Record<string, any>): URLSearchParams => {
  const searchParams = new URLSearchParams();
  
  Object.entries(params).forEach(([key, value]) => {
    if (value !== undefined && value !== null && value !== '') {
      searchParams.append(key, String(value));
    }
  });
  
  return searchParams;
};

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–∞ —Å retry
 */
export const safeApiCall = async <T>(
  apiCall: () => Promise<T>,
  maxRetries: number = MAX_RETRIES,
  retryDelay: number = RETRY_DELAY
): Promise<T> => {
  let lastError: any;
  
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      return await apiCall();
    } catch (error: any) {
      lastError = error;
      
      // –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
      if (error.status === 401 || error.status === 403 || error.status === 404) {
        throw error;
      }
      
      if (attempt < maxRetries) {
        console.warn(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ—É–¥–∞—á–Ω–∞, –ø–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ ${retryDelay}ms...`);
        await delay(retryDelay);
        retryDelay *= 2; // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
      }
    }
  }
  
  throw lastError;
};

// ===== –¢–ò–ü–´ –î–õ–Ø –†–ê–°–®–ò–†–ï–ù–ù–´–• API –ö–õ–ò–ï–ù–¢–û–í =====

export interface CrudApiClient<T, CreateT = Partial<T>, UpdateT = Partial<T>> {
  getAll(params?: any): Promise<T[]>;
  getById(id: string): Promise<T>;
  create(data: CreateT): Promise<T>;
  update(id: string, data: UpdateT): Promise<T>;
  deleteItem(id: string): Promise<void>;
}

export interface PaginatedApiClient<T> {
  getPaginated(params?: any): Promise<{
    data: T[];
    total: number;
    page: number;
    limit: number;
    totalPages: number;
  }>;
}

// ===== –ë–ê–ó–û–í–´–ô CRUD –ö–õ–ò–ï–ù–¢ =====

export abstract class BaseCrudApiClient<T extends Record<string, any>, CreateT = Partial<T>, UpdateT = Partial<T>>
  extends BaseApiClient
  implements CrudApiClient<T, CreateT, UpdateT> {
  
  protected abstract endpoint: string;

  async getAll(params?: any): Promise<T[]> {
    const queryParams = params ? `?${createQueryParams(params)}` : '';
    const data = await this.get<T[]>(`${this.endpoint}${queryParams}`);
    return normalizeMongoArray(data) as T[];
  }

  async getById(id: string): Promise<T> {
    const data = await this.get<T>(`${this.endpoint}/${id}`);
    return normalizeMongoObject(data) as T;
  }

  async create(data: CreateT): Promise<T> {
    const result = await this.post<T>(this.endpoint, data);
    return normalizeMongoObject(result) as T;
  }

  async update(id: string, data: UpdateT): Promise<T> {
    const result = await this.put<T>(`${this.endpoint}/${id}`, data);
    return normalizeMongoObject(result) as T;
  }

  async deleteItem(id: string): Promise<void> {
    await super.delete(`${this.endpoint}/${id}`);
  }
}

// ===== –≠–ö–°–ü–û–†–¢ –û–°–ù–û–í–ù–û–ì–û API –ö–õ–ò–ï–ù–¢–ê =====

export const apiClient = createApiInstance();
export default apiClient;
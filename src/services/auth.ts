import { BaseApiClient } from '../utils/api';
import {
  LoginCredentials,
 AuthResponse,
  User,
} from '../types/common';

/**
 * API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
class AuthApiClient extends BaseApiClient {


  // ===== –ö–õ–ê–°–°–ò–ß–ï–°–ö–ê–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø =====

  /**
   * –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email –∏ –ø–∞—Ä–æ–ª–µ–º
   */
  async login(credentials: LoginCredentials): Promise<AuthResponse> {
    try {
      console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è:', credentials.phone);
      
      const response = await this.post<{
        user: any;
        token: string;
      }>('/auth/login', credentials);
      
      const authData: AuthResponse = {
              success: true,
              user: {
                _id: response.user._id || response.user.id || '',
                id: response.user.id || response.user._id || '',
                phone: response.user.phone || '',
                fullName: response.user.fullName || response.user.name || '',
                role: response.user.role || 'staff',
                avatar: response.user.avatar,
                isActive: response.user.isActive || response.user.active || false,
                lastLogin: response.user.lastLogin,
                createdAt: response.user.createdAt || new Date().toISOString(),
                updatedAt: response.user.updatedAt || new Date().toISOString(),
                uniqNumber: response.user.uniqNumber,
                notes: response.user.notes,
                active: response.user.active || response.user.isActive || false,
                iin: response.user.iin,
                groupId: response.user.groupId,
                birthday: response.user.birthday,
                photo: response.user.photo,
                parentName: response.user.parentName,
                parentPhone: response.user.parentPhone,
                email: response.user.email,
                initialPassword: response.user.initialPassword,
                salary: response.user.salary,
                salaryType: response.user.salaryType,
                penaltyType: response.user.penaltyType,
                penaltyAmount: response.user.penaltyAmount,
                shiftRate: response.user.shiftRate,
                staffId: response.user.staffId,
                staffName: response.user.staffName
              },
              token: response.token // –¢–æ–∫–µ–Ω —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ –æ—Ç–≤–µ—Ç–µ
            };
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ–∫–µ–Ω
      this.saveAuthData(authData);
      
      console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥:', authData.user.fullName);
      return authData;
      
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
      
    
      
      throw new Error(error.message || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
  }


  // ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ï–°–°–ò–ï–ô =====

  /**
   * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
   */
  async logout(): Promise<void> {
    try {
      // –£–≤–µ–¥–æ–º–ª—è–µ–º backend –æ –≤—ã—Ö–æ–¥–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      await this.post('/auth/logout', {});
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –Ω–∞ backend:', error);
    } finally {
      // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
      this.clearAuthData();
      console.log('üö™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  getCurrentUser(): User | null {
    try {
      const userStr = localStorage.getItem('user');
      if (!userStr) {
        return null;
      }
      
      return JSON.parse(userStr);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return null;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   * –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ httpOnly cookie –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * –∏ –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä
   */
  async isAuthenticated(): Promise<boolean> {
    const user = this.getCurrentUser();
    
    if (!user) {
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    return await this.validateToken();
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
   * –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ httpOnly cookie –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
   * —á–µ—Ä–µ–∑ –º–µ—Ö–∞–Ω–∏–∑–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
   */
  async refreshToken(): Promise<boolean> {
    try {
      // –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ Authorization –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
      // –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤, –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–π—Ç–∏
      const token = this.getToken();
      if (!token) {
        return false;
      }
      
      const isValid = await this.validateToken();
      
      if (isValid) {
        console.log('üîÑ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
        return true;
      } else {
        return false;
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
      
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω, –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      this.clearAuthData();
      
      return false;
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ —Å backend
   * –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ httpOnly cookie —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
   */
  async validateToken(): Promise<boolean> {
    try {
      // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ Authorization
      const response = await this.get('/auth/validate');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –≤–∞–ª–∏–¥–µ–Ω
      if (response && typeof response === 'object' && response.valid !== undefined) {
        return response.valid;
      }
      
      return true;
      
    } catch (error) {
      console.warn('–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω:', error);
      return false;
    }
  }


  private getToken(): string | null {
    return localStorage.getItem('auth_token');
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
 private saveAuthData(authData: AuthResponse): void {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ–∫–µ–Ω
    localStorage.setItem('user', JSON.stringify(authData.user));
    if (authData.token) {
      localStorage.setItem('auth_token', authData.token);
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
 private clearAuthData(): void {
    // –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ localStorage
    localStorage.removeItem('user');
    localStorage.removeItem('auth_token');
    localStorage.removeItem('phoneNumber');
  }
}






// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
export const authApi = new AuthApiClient();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

export const login = (credentials: LoginCredentials) => authApi.login(credentials);
export const logout = () => authApi.logout();
export const getCurrentUser = () => authApi.getCurrentUser();
export const isAuthenticated = () => authApi.isAuthenticated();
export const refreshToken = () => authApi.refreshToken();
export const validateToken = () => authApi.validateToken();

export default authApi;

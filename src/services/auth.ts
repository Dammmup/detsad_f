import { BaseApiClient } from '../utils/api';
import {
  LoginCredentials,
  OTPResponse,
  AuthResponse,
  User,
} from '../types/common';

/**
 * API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
class AuthApiClient extends BaseApiClient {


  // ===== –ö–õ–ê–°–°–ò–ß–ï–°–ö–ê–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø =====

  /**
   * –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email –∏ –ø–∞—Ä–æ–ª–µ–º
   */
  async login(credentials: LoginCredentials): Promise<AuthResponse> {
    try {
      console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è:', credentials.phone);
      
      const response = await this.post<{
        user: any;
      }>('/auth/login', credentials);
      
      const authData: AuthResponse = {
        user: {
          id: response.user.id || response.user._id,
          email: response.user.email,
          fullName: response.user.fullName || response.user.name,
          role: response.user.role || 'staff'
        },
        token: '' // –¢–æ–∫–µ–Ω —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ httpOnly cookie
      };
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–æ–∫–µ–Ω —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ cookie
      this.saveAuthData(authData);
      
      console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥:', authData.user.fullName);
      return authData;
      
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
      
      // –ï—Å–ª–∏ backend –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Å–æ–∑–¥–∞–µ–º –º–æ–∫-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      if (error.code === 'ECONNREFUSED' || error.status === 404) {
        console.warn('üîß Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
        return this.createMockAuth(credentials);
      }
      
      throw new Error(error.message || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
  }


  // ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ï–°–°–ò–ï–ô =====

  /**
   * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
   */
  async logout(): Promise<void> {
    try {
      const token = this.getToken();
      
      if (token) {
        // –£–≤–µ–¥–æ–º–ª—è–µ–º backend –æ –≤—ã—Ö–æ–¥–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        await this.post('/auth/logout', {});
      }
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –Ω–∞ backend:', error);
    } finally {
      // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
      this.clearAuthData();
      console.log('üö™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  getCurrentUser(): User | null {
    try {
      const userStr = localStorage.getItem('user');
      if (!userStr) {
        return null;
      }
      
      return JSON.parse(userStr);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return null;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   * –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ httpOnly cookie –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * –∏ –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä
   */
  async isAuthenticated(): Promise<boolean> {
    const user = this.getCurrentUser();
    
    if (!user) {
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    return await this.validateToken();
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
   * –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ httpOnly cookie –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
   * —á–µ—Ä–µ–∑ –º–µ—Ö–∞–Ω–∏–∑–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
   */
  async refreshToken(): Promise<boolean> {
    try {
      // –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      const isValid = await this.validateToken();
      
      if (isValid) {
        console.log('üîÑ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏ httpOnly cookie)');
        return true;
      } else {
        return false;
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
      
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω, –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      this.clearAuthData();
      
      return false;
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ —Å backend
   * –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ httpOnly cookie —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
   */
  async validateToken(): Promise<boolean> {
    try {
      // –ü—Ä–æ—Å—Ç–æ –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é, —Ç–æ–∫–µ–Ω –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ cookie
      await this.get('/auth/validate');
      return true;
      
    } catch (error) {
      console.warn('–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω:', error);
      return false;
    }
  }

  // ===== –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ =====

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ localStorage (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ httpOnly cookie)
   * –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, —Ç–∞–∫ –∫–∞–∫ —Ç–æ–∫–µ–Ω —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ httpOnly cookie
   */
  private getToken(): string | null {
    return null; // –¢–æ–∫–µ–Ω —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ httpOnly cookie, –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑ JavaScript
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
 private saveAuthData(authData: AuthResponse): void {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–æ–∫–µ–Ω —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ httpOnly cookie
    localStorage.setItem('user', JSON.stringify(authData.user));
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
 private clearAuthData(): void {
    // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage, —Ç–æ–∫–µ–Ω –≤ httpOnly cookie —É–¥–∞–ª—è–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    localStorage.removeItem('user');
    localStorage.removeItem('phoneNumber');
  }

  /**



  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
   */
  private createMockAuth(credentials: LoginCredentials): AuthResponse {
    const mockToken = `mock-token-${Date.now()}-${Math.random().toString(36).substring(2)}`;
    
    const authData: AuthResponse = {
      token: mockToken,
      user: {
        id: 'mock-user-1',
        email: credentials.phone + '@example.com', // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∫–∞–∫ –æ—Å–Ω–æ–≤—É –¥–ª—è email –≤ –º–æ–∫–µ
        fullName: '–ú–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ' + credentials.phone,
        role: 'staff'
      }
    };
    
    this.saveAuthData(authData);
    
    console.log('üß™ –°–æ–∑–¥–∞–Ω–∞ –º–æ–∫-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:', authData.user);
    return authData;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
export const authApi = new AuthApiClient();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

export const login = (credentials: LoginCredentials) => authApi.login(credentials);
export const logout = () => authApi.logout();
export const getCurrentUser = () => authApi.getCurrentUser();
export const isAuthenticated = () => authApi.isAuthenticated();
export const refreshToken = () => authApi.refreshToken();
export const validateToken = () => authApi.validateToken();

export default authApi;